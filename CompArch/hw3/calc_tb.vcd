$date
	Wed Feb 27 17:05:22 2019
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module calc_tb $end
$scope module my_calc $end
$var wire 4 ! B [3:0] $end
$var wire 3 " Op [2:0] $end
$var wire 1 # Reset $end
$var wire 4 $ Result [3:0] $end
$var wire 1 % clk $end
$var wire 4 & AluOut [3:0] $end
$var reg 4 ' state [3:0] $end
$scope module alu1 $end
$var wire 4 ( A [3:0] $end
$var wire 4 ) B [3:0] $end
$var wire 3 * Op [2:0] $end
$var wire 4 + adder_out [3:0] $end
$var wire 1 , adder_Cout $end
$var wire 4 - S [3:0] $end
$scope module the_adder $end
$var wire 4 . A [3:0] $end
$var wire 4 / B [3:0] $end
$var wire 1 0 Cin $end
$var wire 4 1 S [3:0] $end
$var wire 1 , Cout $end
$var wire 1 2 C3 $end
$var wire 1 3 C2 $end
$var wire 1 4 C1 $end
$scope module FA1 $end
$var wire 1 5 A $end
$var wire 1 6 B $end
$var wire 1 0 Cin $end
$var wire 1 4 Cout $end
$var wire 1 7 S $end
$upscope $end
$scope module FA2 $end
$var wire 1 8 A $end
$var wire 1 9 B $end
$var wire 1 4 Cin $end
$var wire 1 3 Cout $end
$var wire 1 : S $end
$upscope $end
$scope module FA3 $end
$var wire 1 ; A $end
$var wire 1 < B $end
$var wire 1 3 Cin $end
$var wire 1 2 Cout $end
$var wire 1 = S $end
$upscope $end
$scope module FA4 $end
$var wire 1 > A $end
$var wire 1 ? B $end
$var wire 1 2 Cin $end
$var wire 1 , Cout $end
$var wire 1 @ S $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
bx 1
x0
bx /
bx .
bx -
x,
bx +
bx *
b0 )
bx (
bx '
bx &
0%
bx $
1#
bx "
b0 !
$end
#100
05
08
0;
0>
b0 $
b0 '
b0 (
b0 .
1%
#200
0@
02
b101 &
b101 -
1=
03
0,
0:
b101 +
b101 1
17
04
09
0?
16
1<
00
b101 /
0%
b10 "
b10 *
b101 !
b101 )
0#
#300
b1010 &
b1010 -
1:
1@
14
12
07
b1010 +
b1010 1
0=
15
1;
b101 $
b101 '
b101 (
b101 .
1%
#400
b111 &
b111 -
0@
04
02
17
1:
03
b111 +
b111 1
1=
06
19
0<
b10 /
0%
b10 !
b10 )
#500
1@
12
b1001 &
b1001 -
0=
13
b1001 +
b1001 1
0:
18
b111 $
b111 '
b111 (
b111 .
1%
#600
1:
1=
0@
1,
1<
1?
14
b110 &
b110 -
b110 +
b110 1
07
06
19
10
b1110 /
0%
b100 "
b100 *
b1 !
b1 )
#700
0:
04
b101 +
b101 1
17
05
b110 $
b110 '
b110 (
b110 .
1%
#800
b100 +
b100 1
07
b1110 &
b1110 -
00
0%
b1 "
b1 *
b1110 !
b1110 )
#900
b1100 +
b1100 1
1@
1>
b1110 $
b1110 '
b1110 (
b1110 .
1%
#1000
0,
02
03
17
1:
1=
b1111 +
b1111 1
1@
b1111 &
b1111 -
16
09
0<
0?
b1 /
0%
b10 "
b10 *
b1 !
b1 )
#1100
1,
0@
12
0=
13
b0 &
b0 -
0:
14
b0 +
b0 1
07
15
b1111 $
b1111 '
b1111 (
b1111 .
1%
#1200
0%
#1300
b1 &
b1 -
04
03
02
0,
17
0:
0=
b1 +
b1 1
0@
05
08
0;
0>
b0 $
b0 '
b0 (
b0 .
1%
#1400
0%
#1500
b10 &
b10 -
1:
14
b10 +
b10 1
07
15
b1 $
b1 '
b1 (
b1 .
1%
#1600
0%
#1700
b11 &
b11 -
0=
04
03
17
b11 +
b11 1
1:
05
18
b10 $
b10 '
b10 (
b10 .
1%
#1800
13
14
1:
1@
1=
19
1?
b1 &
b1 -
b1110 +
b1110 1
07
16
0<
10
b1011 /
0%
b111 "
b111 *
b100 !
b100 )
#1900
17
b1101 +
b1101 1
0:
15
08
b1 $
b1 '
b1 (
b1 .
1%
#2000
0,
b1110 &
b1110 -
1@
07
1:
03
b1110 +
b1110 1
1=
02
06
09
1<
b1100 /
0%
b110 "
b110 *
b11 !
b11 )
#2100
b1011 &
b1011 -
04
03
12
1,
17
1:
0=
b1011 +
b1011 1
1@
05
18
1;
1>
b1110 $
b1110 '
b1110 (
b1110 .
1%
#2200
0%
#2300
b1000 &
b1000 -
13
0:
1@
14
12
07
b1000 +
b1000 1
0=
15
0;
b1011 $
b1011 '
b1011 (
b1011 .
1%
#2400
0%
